* Special Forms
** ~(let [BINDINGS])~
Define bindings in the global or local scope, depending on the syntax
used. See the examples to understand the form differences.

Returns ~nil~.

- Create global bindings:
#+begin_src lisp
(let global-value 'foo
     another-global 'bar)
#+end_src

- Create local bindings:
#+begin_src lisp
(let ((local-binding 'foo)
      (another-local 'bar))
  (print (concat local-binding another-local)))
#+end_src

** ~(set [BINDINGS])~
Assign a value to a symbol which already exists in the current scope.
This special form cannot define symbols, an attempt to do so will
result in an error.

If a symbol in the local scope shadows another in the global scope,
the assigment will be done to the symbol in the local scope.

Returns ~nil~.

#+begin_src lisp
(let number 69)
(print number)     ; => 69

(set number 420)
(print number)     ; => 420

(let ((number 42))
  (print number)   ; => 42
  (set number 96)
  (print number))  ; => 96

(print number)     ; => 420
#+end_src

~set~ can also be used to mutate an element in a list. The symbol form
is ~(LIST POSITION)~.

#+begin_src lisp
(let list '(1 2 3 4 (5 6 (7 8)))
     number)

(print list)                      ; => (1 2 3 4 (5 6 (7 8)))
(print number)                    ; => nil

;; list[4][2][1] = foo
(set (list 4 2 1) 'foo
     number 420)

(print list)                      ; => (1 2 3 4 (5 6 (7 foo)))
(print number)                    ; => 420

;; Order doesn't matter
(set number 69
     (list 4 2 1) 'bar)

(print list)                      ; => (1 2 3 4 (5 6 (7 bar)))
(print number)                    ; => 69

;; No value defaults to nil
(set number 'baz
     (list 4 2 0))

(print list)                      ; => (1 2 3 4 (5 6 (nil bar)))
(print number)                    ; => baz
#+end_src

** ~(do [BODY])~
Evaluate the expressions in the ~BODY~ sequentially.

Returns the last evaluated value.

#+begin_src lisp
(do
 (print 'foo)
 (print 'bar)
 (+ 2 2))      ; => 4

(do
 (print 'foo)
 (print 'bar)) ; => nil
#+end_src

** ~(if [CONDITION] [CONSEQUENCE] [ANTECEDENCE])~
If ~CONDITION~ evaluates to a truthy value, evaluates the
~CONSEQUENCE~ branch. Else evaluates the ~ANTECEDENCE~ branch.

Returns the evaluation result of the required branch if the branch
exists, else ~nil~.

#+begin_src lisp
(if)                                    ; => nil
(if true)                               ; => nil
(if 1 2)                                ; => 2
(if 0 2 "zero is false")                ; => zero is false
(if (< 4 5) (print "4 is less than 5")) ; => 4 is less than 5

(if false
    (print "unsafe {}")
  (print "If it compiles, it works!"))  ; => If it compiles, it works!

(if 'blah
    (do
     (let var 'foo-bar)
     (print var)))                      ; => foo-bar
#+end_src

** ~(when [CONDITION] [BODY])~
Behaves like the following.

#+begin_src lisp
(if CONDITION
    (do BODY))
#+end_src

** ~(unless [CONDITION] [BODY])~
Behaves like the following.

#+begin_src lisp
(if CONDITION
    nil
  (do BODY))
#+end_src

** ~(dolist [(ITERATOR LIST)] [BODY])~
Like ~foreach~ in most languages.

Returns ~nil~.

#+begin_src lisp
(dolist)                ; => nil

(dolist (i '(1 2 3 4))
  (print i))            ; => nil

(dolist (i '(1 2 3 4))
  (print i)
  (* i 2))              ; => nil
#+end_src

** ~(while [CONDITION] [BODY])~
While loops. Evaluates ~BODY~ while ~CONDITION~ is truthy.

Returns the last evaluated value.

#+begin_src lisp
(while)                 ; => nil

;; Print the numbers from one to ten, return nil
(let i 0)
(while (i < 10)
  (+= i 1)
  (print i))            ; => nil

;; Print the numbers from one to ten, return (* i 2)
(let i 0)
(while (i < 10)
  (+= i 1)
  (print i)
  (* i 2))              ; => 20
#+end_src

** ~(lambda ([ARGUMENTS]) [BODY])~
Create a lambda.

Returns the lambda created, which in turn returns the last evaluated
expression in ~BODY~.

#+begin_src lisp
(lambda (n) (* n 2))     ; => #<lambda>
((lambda (n) (* n 2)) 2) ; => 4

(let repeat (lambda (string times)
              (while (> times 0)
                (print string)
                (-= times 1))))

;; Print "Hello, world" 3 times
(repeat "Hello, world" 3)
#+end_src

A variadic parameter is defined by prepending the last parameter of
the lambda with the ~:rest~ symbol. Note that you can have
non-variadic parameters before the variadic parameter.

The variadic parameter is assigned to the list of all the values which
exceed the count of the non-variadic parameters. It can be an empty
list, if no variadic arguments were provided.

#+begin_src lisp
(let add (lambda (:rest numbers)
           (let ((result 0))
             (dolist (i numbers)
               (+= result i))
             result)))

(let subtract (lambda (first :rest numbers)
                (let ((result first))
                  (dolist (i numbers)
                    (-= result i))
                  result)))

(add 1 2 3 4)   ; => 10
(add)           ; => 0

(subtract 10 5) ; => 5
(subtract 3)    ; => 3
(subtract)      ; => error: variadic function 'subtract' takes at least 1 parameter(s), found 0 instead
#+end_src

** ~(macro ([ARGUMENTS]) [BODY])~
Create a macro. It behaves like a lambda in every way, except that the
arguments are not evaluated. It can be thought of as a /lazy/ lambda,
for those who have programmed in lazily executed languages like
Haskell before.

Returns the macro created, which in turn returns the last evaluated
expression in ~BODY~.

#+begin_src lisp
(macro (n) (* n 2))      ; => #<macro>
((macro (n) (* n 2)) 2)  ; => 4
((macro (v) v) foo)      ; => foo

;; Implement `dolist' in terms of a macro
(let dolist
  (macro
   (decl :rest body)
   `(let ((list ,(nth 1 decl))
          (,(car decl) nil))
      (while (not (nil? list))
        (set ,(car decl) (car list))
        (set list (cdr list))
        ,@body))))

;; Print "i: N" where 1 <= N <= 4
(dolist (range 1 4)
  (print (concat "i: " i)))
#+end_src

Variadics in macros work the same way as in lambdas.

#+begin_src lisp
(let echo (macro (:rest list)
            (dolist (i list)
              (print i))))

;; Print the arguments 1, 2, 3 and 4 separated by a newline
(echo 1 2 3 4)

;; Print nothing
(echo)

;; Symbol 'foo' neither exists nor is quoted, yet it behaves like
;; quotation. This is the fundamental difference between lambdas and
;; macros.
(echo foo) ; => foo
#+end_src

** ~(quote SEXP)~
Quote an expression. Shorthand exists for this operation.

#+begin_src lisp
(quote (1 2 3 4)) ; => (1 2 3 4)
(quote symbol)    ; => symbol

'(1 2 3 4)        ; => (1 2 3 4)
'symbol           ; => symbol
#+end_src

** ~(quasiquote SEXP)~
Quasi quote an expression. Shorthand exists for this operation.

#+begin_src lisp
(quasi-quote (1 2 3 4))                 ; => (1 2 3 4)
(quasi-quote (1 2 (unquote (+ 1 2))))   ; => (1 2 3)
(quasi-quote (1 2 (unquote-splice
                   (3 4 5 6))))         ; => (1 2 3 4 5 6)

`(1 2 3 4)                              ; => (1 2 3 4)
`(1 2 ,(+ 1 2))                         ; => (1 2 3)
`(1 2 ,@(3 4 5 6))                      ; => (1 2 3 4 5 6)
#+end_src

** ~(break)~
Break out of a block, and by extension anything which uses them like
loops and functions.

#+begin_src lisp
$ cat break.lisp
(dolist (i '(1 2 3 4 5))
  (when (= i 3)
    (break))
  (print i))

(let ((i 0))
  (while (< i 10)
    (set i (+ i 1))
    (when (= i 3)
      (break))
    (print i)))

(do
 (print 'foo)
 (break)
 (print 'bar))

(let f (lambda ()
         (print 'fizzbuzz)
         (break)
         (print '69-420)))

(print (concat "Result of f: " (f)))
#+end_src

#+begin_src console
$ lust break.lisp
1
2
1
2
foo
fizzbuzz
Result of f: nil
#+end_src

** ~(continue)~
Skip the rest of the body inside a block.

#+begin_src lisp
$ cat continue.lisp
(dolist (i '(1 2 3 4 5))
  (when (= i 3)
    (continue))
  (print i))

(let ((i 0))
  (while (< i 10)
    (set i (+ i 1))
    (when (= i 3)
      (continue))
    (print i)))

(do
 (print 'foo)
 (continue)
 (print 'bar))

(let f (lambda ()
         (print 'fizzbuzz)
         (continue)
         (print '69-420)))

(print (concat "Result of f: " (f)))
#+end_src

#+begin_src console
$ lust continue.lisp
1
2
4
5
1
2
4
5
foo
fizzbuzz
Result of f: nil
#+end_src

** ~(return [VALUE])~
Return from within a block, with an optional ~VALUE~.

#+begin_src lisp
$ cat return.lisp
(print (concat "Result of dolist: "
               (dolist (i '(1 2 3 4 5))
                 (when (= i 3)
                   (return 'foobar-dolist))
                 (print i))))

(print (concat "Result of let: "
               (let ((i 0))
                 (while (< i 10)
                   (set i (+ i 1))
                   (when (= i 3)
                     (return i))
                   (print i))))))

(print (concat "Result of do: "
               (do
                (print 'foo)
                (return 69)
                (print 'bar))))

(let f (lambda ()
         (print 'fizzbuzz)
         (return)                     ; Empty (return), results in nil
         (print '69-420)))

(print (concat "Result of f: " (f)))
#+end_src

#+begin_src console
$ lust return.lisp
1
2
Result of dolist: foobar-dolist
1
2
Result of let: 3
foo
Result of do: 69
fizzbuzz
Result of f: nil
#+end_src

** ~(error MESSAGE)~
Throw error with message ~MESSAGE~ and halt the program.

#+begin_src lisp
(error (concat 'foo " is not a number")) ; => error: foo is not a number
(error 'foobarbaz)                       ; => error: foobarbaz
(error 420.69)                           ; => error: 420.69
#+end_src

* Ad-hoc primitives
** ~(car LIST)~
Return the head of ~LIST~.

#+begin_src lisp
(let list '(1 2 3 4 5))
(car list) ; => 1
#+end_src

** ~(cdr LIST)~
Return the tail of ~LIST~.

#+begin_src lisp
(let list '(1 2 3 4 5))
(cdr list) ; => (2 3 4 5)
#+end_src

** ~(nth N LIST)~
Return the ~N~-th element of ~LIST~. The behaviour of ~N~ is
similar to that of ~set~ in the list form.

#+begin_src lisp
(let list '(1 2 3 4 (5 6 (7 8))))
(nth 0 list)        ; => 1
(nth '(4 2 1) list) ; => 8
#+end_src

** ~(cons VALUE ...)~
Combine the values together into a single list.

#+begin_src lisp
(cons '(1 2) '(3 4) '((5 6) 7)) ; => (1 2 3 4 (5 6) 7)
#+end_src

** ~(cons! N VALUE ...)~
Combine the values together into a single list, except for the ~N~-th
item, which is pushed into the list instead.

#+begin_src lisp
(cons! 1 '(1 2) '(3 4) '((5 6) 7)) ; => (1 2 (3 4) (5 6) 7)
#+end_src

** ~(slice SEQUENCE [LOWER] [UPPER])~
Slice ~SEQUENCE~ by the bounds supplied, defaulting to the two ends
respectively.

#+begin_src lisp
(slice '(1 2 3 4 5))     ; => (1 2 3 4 5)
(slice '(1 2 3 4 5) 1)   ; => (2 3 4 5)
(slice '(1 2 3 4 5) 1 3) ; => (2 3 4)

(slice "message")        ; => "message"
(slice "message" 1)      ; => "essage"
(slice "message" 1 4)    ; => "ess"
#+end_src

** ~(length SEQUENCE)~
Returns the number of items in ~SEQUENCE~.

#+begin_src lisp
(length "Hello, world") ; => 12
(length 'foobar)        ; => 6
(length '(0 1 2 3 4))   ; 5
#+end_src

** ~(reverse SEQUENCE)~
Reverses ~SEQUENCE~.

#+begin_src lisp
(reverse "Hello, world") ; => "dlrow ,olleH"
(reverse 'foobar)        ; => raboof
(reverse '(0 1 2 3 4))   ; => (4 3 2 1 0)
#+end_src

** ~(concat VALUE ...)~
Concat several values together into a single string.

#+begin_src lisp
(concat "Hello, " 'world)    ; => "Hello, world"
(length 42 " is the answer") ; => "42 is the answer"
#+end_src

** ~(range BOUND [BOUND] [STEP])~
Generate a range of numbers, whose lower boundary defaults to ~0~. The
~STEP~ is the incrementer, which defaults to ~1~ or ~-1~ depending on
the bounds provided.

#+begin_src lisp
(range 5)      ; => (0 1 2 3 4)
(range 2 7)    ; => (2 3 4 5 6)
(range 7 2)    ; => (7 6 5 4 3)
(range 2 7 2)  ; => (2 4 6)
(range 7 2 -2) ; => (7 5 3)
#+end_src

A nice advantage of this function is that it can prevent infinite
loops. Here's some examples.

#+begin_src lisp
(range 2 7 -2) ; => ()
(range 7 2 2)  ; => ()
#+end_src

** ~(print VALUE ...)~
Print the values sequentially separated by newlines.

#+begin_src lisp
(print "Hello, world" "Hello, universe")
#+end_src

#+begin_src console
$ lust print.lisp
Hello, world
Hello, universe
#+end_src

** ~(read [PROMPT])~
Read input from the user with optional ~PROMPT~.

#+begin_src console
$ lust
> (read)
This is a string
"This is a string"
> (read "$ ")
$ Input here
"Input here"
#+end_src

** ~(open FILE)~
Read the contents of ~FILE~.

#+begin_src console
$ cat test
1
2
$ lust
> (open 'test)
"1
2"
> (open "test")
"1
2"
#+end_src

** ~(write SEXP FILE)~
Write ~SEXP~ to ~FILE~.

#+begin_src console
$ ls -a
.  ..
$ lust
> (write 69 'test)
> (open 'test)
"69"
> (write "Hello, world" 'test)
> (open "test")
"Hello, world"
> (write '(foo bar baz) "test")
> (open "test")
"(foo bar baz)"
> (write (concat (open 'test) " fizzbuzz") "test")
> (open "test")
"(foo bar baz) fizzbuzz"
#+end_src

** ~args~
The list of command line arguments.

#+begin_src console
$ cat test.lisp
(print args)
$ lust test.lisp
()
$ lust test.lisp foo bar baz
("foo" "bar" "baz")
#+end_src

* Boolean conditions
** ~(and ...)~
Returns ~true~ if all the values are truthy. Exhibits short-circuit
behaviour.

#+begin_src lisp
(and 1 true "cool" 'meh)     ; => true
(and 0 true "cool" 'meh)     ; => false
(and 1 false "cool" 'meh)    ; => false
(and 1 true "cool" 'meh nil) ; => false
(and 1 true "cool" 'meh '()) ; => false
#+end_src

In lust, values which are considered false include ~0~, ~nil~ and
~false~.

** ~(or ...)~
Returns ~true~ if any one of the values are truthy. Exhibits
short-circuit behaviour.

#+begin_src lisp
(and 1 true "cool" 'meh)  ; => true
(and 0 true "cool" 'meh)  ; => true
(and 0 false nil 'meh)    ; => true
(and 0 false nil)         ; => false
#+end_src

** ~(not VALUE)~
Returns ~true~ if ~VALUE~ is not truthy.

#+begin_src lisp
(not 0)      ; => true
(not false)  ; => true
(not nil)    ; => true
(not 1)      ; => false
(not 'meh)   ; => false
#+end_src

* Equality
** ~(= VALUE ...)~
Returns ~true~ if all the values are equal.

#+begin_src lisp
(= "string" "string" "string") ; => true
(= 5 5.0 (/ 25 5))             ; => true
(= 'yeah 'yeah)                ; => true
(= nil nil)                    ; => true

(= "foo" "bar")                ; => false
(= 5 7)                        ; => false
(= true false)                 ; => false
(= 'yeah 'lol)                 ; => false
#+end_src

** ~(!= VALUE ...)~
Binary opposite of ~(=)~.

#+begin_src lisp
(= "string" "string" "string") ; => false
(= 5 5.0 (/ 25 5))             ; => false
(= 'yeah 'yeah)                ; => false
(= nil nil)                    ; => false

(= "foo" "bar")                ; => true
(= 5 7)                        ; => true
(= true false)                 ; => true
(= 'yeah 'lol)                 ; => true
#+end_src

* Types
** ~(nil? VALUE)~
Checks if ~VALUE~ is ~nil~ or ~()~.

#+begin_src lisp
(nil? nil)   ; => true
(nil? '())   ; => true
(nil? false) ; => false
#+end_src

** ~(number? VALUE)~
Checks if ~VALUE~ is a number.

#+begin_src lisp
(number? nil)   ; => false
(number? '(1))  ; => false
(number? false) ; => false
 number
(number? 1)     ; => true
#+end_src

** ~(string? VALUE)~
Checks if ~VALUE~ is a string.

#+begin_src lisp
(string? nil)   ; => false
(string? '(1))  ; => false
(string? false) ; => false

(string? "str") ; => true
#+end_src

** ~(symbol? VALUE)~
Checks if ~VALUE~ is a symbol.

#+begin_src lisp
(symbol? nil)   ; => false
(symbol? '(1))  ; => false
(symbol? false) ; => false
(symbol? "str") ; => false

(symbol? 'foo)  ; => true
#+end_src

** ~(bool? VALUE)~
Checks if ~VALUE~ is a boolean.

#+begin_src lisp
(bool? nil)   ; => false
(bool? '(1))  ; => false
(bool? false) ; => false

(bool? "str") ; => true
#+end_src

** ~(list? VALUE)~
Checks if ~VALUE~ is a list.

#+begin_src lisp
(list? nil)    ; => false
(list? false)  ; => false
(list? "str")  ; => false

(list? '())    ; => true
(list? '(1 2)) ; => true
(list? '(- 2)) ; => true
#+end_src

** ~(string->symbol STRING)~
Convert ~STRING~ to a possible symbol. If the string contains
whitespaces or parenthesis, it will throw an error.

#+begin_src lisp
(string->symbol "foo")      ; => foo
(string->symbol "()")       ; => error: invalid symbol '()'
(string->symbol "foo bar")  ; => error: invalid symbol 'foo bar'
#+end_src

** ~(symbol->string SYMBOL)~
Convert ~SYMBOl~ to a string.

#+begin_src lisp
(symbol->string 'foo) ; => "foo"
#+end_src

** ~(string->boolean STRING)~
Convert ~STRING~ to a possible boolean.

#+begin_src lisp
(string->boolean "true")  ; => true
(string->boolean "false") ; => false
(string->boolean "nil")   ; => error: invalid boolean 'nil'
#+end_src

** ~(boolean->string BOOLEAN)~
Convert ~BOOLEAN~ to a string.

#+begin_src lisp
(boolean->string true)  ; => "true"
(boolean->string false) ; => "false"
#+end_src

** ~(string->number STRING)~
Convert ~STRING~ to a possible number.

#+begin_src lisp
(string->number "420")    ; => 420
(string->number "69.420") ; => 69.420
(string->number "4.2.0")  ; => error: invalid number '4.2.0'
(string->number "foo")    ; => error: invalid number 'foo'
#+end_src

** ~(number->string NUMBER)~
Convert ~NUMBER~ to a string.

#+begin_src lisp
(number->string 420)     ; => "420"
(number->string 69.420)  ; => "69.420"
#+end_src

** ~(function->list FUNCTION)~
Convert a lambda or macro to a list. The possibilities with this are
/literally endless/, considering you can straight up modify the source
of a function definition. Just convert some lambda or macro to a list,
and do *whatever* you want with the list (evaluate a changed version,
maybe?).

#+begin_src lisp
(let double (lambda (n)
              (print (concat "Doubling " n))
              (* n 2)))

(function->list double) ; => (lambda (n) (print (concat "Doubling " n)) (* n 2))

(let echo (macro
           (s)
           (print s)
           (print s)))

(function->list echo)   ; => (macro (s) (print s) (print s))
#+end_src

Anonymous lambdas and macros can also be used.

#+begin_src lisp
(function->list (lambda (n)
                  (print (concat "Doubling " n))
                  (* n 2)))  ; => (lambda (n) (print (concat "Doubling " n)) (* n 2))

(function->list (macro
                 (s)
                 (print s)
                 (print s))) ; => (macro (s) (print s) (print s))
#+end_src

Variadics are also handled smoothly.

#+begin_src lisp
(let add (lambda (:rest numbers)
           (let ((result 0))
             (dolist (i numbers)
               (+= result i))
             result)))

(let sub (lambda (first :rest numbers)
           (let ((result first))
             (dolist (i numbers)
               (-= result i))
             result)))

(function->list add)  ; => (lambda (:rest numbers) (let ((result 0)) (dolist (i numbers) (+= result i)) result))
(function->list sub)  ; => (lambda (first :rest numbers) (let ((result first)) (dolist (i numbers) (+= result i)) result))

(let echo (macro
           (:rest list)
           (dolist (i list)
             (print i))))

(let echo (macro
           (first :rest list)
           (print first)
           (dolist (i list)
             (print i))))

(function->list echo) ; => (macro (first :rest list) (print first) (dolist (i list) (print i)))
#+end_src

* Arithmetic conditions
** ~(< VALUE ...)~
Checks if the values are less than each other sequentially.

#+begin_src lisp
(< 1 2 3 4 5) ; => true
(< 2 2 3 4 5) ; => false
(< 1 2 6 4 5) ; => false
#+end_src

** ~(<= VALUE ...)~
Checks if the values are less than or equal to each other sequentially.

#+begin_src lisp
(<= 1 2 3 4 5) ; => true
(<= 2 2 3 4 5) ; => true
(< 1 2 6 4 5)  ; => false
#+end_src

** ~(> VALUE ...)~
Checks if the values are greater than each other sequentially.

#+begin_src lisp
(> 5 4 3 2 1) ; => true
(> 5 4 3 2 2) ; => false
(> 5 4 6 2 1) ; => false
#+end_src

** ~(>= VALUE ...)~
Checks if the values are greater than or equal to each other sequentially.

#+begin_src lisp
(>= 5 4 3 2 1) ; => true
(>= 5 4 3 2 2) ; => true
(>= 5 4 6 2 1) ; => false
#+end_src

* Arithmetic operations
** ~(+ VALUE ...)~
Adds the values sequentially.

#+begin_src lisp
(+ 1 2 3 4) ; => 10
(+)         ; => 0
#+end_src

** ~(- VALUE ...)~
Substracts the values sequentially. If only one value is provided, it
negates it.

#+begin_src lisp
(- 10 4 3 2) ; => 1
(- 4)        ; => -4
(-)          ; => 0
#+end_src

** ~(* VALUE ...)~
Multiplies the values sequentially.

#+begin_src lisp
(* 1 2 3 4) ; => 24
(*)         ; => 1
#+end_src

** ~(/ VALUE ...)~
Divides the values sequentially.

#+begin_src lisp
(/ 18 2 2 2) ; => 2.25
(/)          ; => 1
#+end_src

** ~(% VALUE ...)~
Performs modulo on the values sequentially.

#+begin_src lisp
(% 5 4 3 2) ; => 1
(%)         ; => 0
#+end_src

* QoL improvements
** ~(defvar NAME VALUE)~
Like doing ~(let NAME VALUE)~. This form is created because Emacs
highlights this correctly lol.

#+begin_src lisp
(defvar symbol 'foo)

symbol ; => foo
#+end_src

** ~(defun NAME ARGUMENTS [BODY])~
Like doing ~(let NAME (lambda ARGUMENTS BODY))~.

#+begin_src lisp
(defun double (n)
  (print (concat "Doubling " n))
  (* n 2))

(double 5) ; => 10
#+end_src

** ~(defmacro NAME VALUE)~
Like doing ~(let NAME (macro ARGUMENTS BODY))~.

#+begin_src lisp
(defmacro echo (s)
  (print s)
  (print s))

;; Print (1 2 3) 2 times
(echo (1 2 3))
#+end_src

** ~(eval SEXP)~
If ~SEXP~ is a string, interpret it as lust source code. Evaluate all
other expression types.

Return the evaluation result.

#+begin_src lisp
(let foo 'bar)

(eval 'foo)        ; => bar
(eval '(+ 1 2 3))  ; => 6
(eval "(+ 4 5 6)") ; => 15
#+end_src

** ~(even? NUMBER)~
Return ~true~ if ~NUMBER~ is even.

#+begin_src lisp
(even? 4) ; => true
(even? 5) ; => false
#+end_src

** ~(odd? NUMBER)~
Return ~true~ if ~NUMBER~ is odd.

#+begin_src lisp
(odd? 5) ; => true
(odd? 4) ; => false
#+end_src

** ~(empty? SEQUENCE)~
Return ~true~ if ~SEQUENCE~ is empty.

#+begin_src lisp
(empty? '())  ; => true
(empty? "")   ; => true
(empty? '(1)) ; => false
(empty? "a")  ; => false
#+end_src

** ~(map FUNCTION LIST)~
Execute ~FUNCTION~ on every item in ~LIST~ and generate a new list
from the results.

#+begin_src lisp
(map (lambda (n) (* n 2)) '(1 2 3 4)) ; => (2 4 6 8)
(map even '(1 2 3 4))                 ; => (false true false true)
#+end_src

** ~(filter PREDICATE LIST)~
Execute ~PREDICATE~ on every item in ~LIST~ and generate a new list
from the items for which ~(PREDICATE item)~ returned a truthy value.

#+begin_src lisp
(filter even '(1 2 3 4)) ; => (2 4)
(filter odd '(1 2 3 4))  ; => (1 3)
#+end_src

** ~(filter-map PREDICATE FUNCTION LIST)~
Like doing ~(map FUNCTION (filter PREDICATE LIST))~.

#+begin_src lisp
(filter-map even? (lambda (n) (* n 2)) '(1 2 3 4)) ; => (4 8)
(filter-map odd? (lambda (n) (/ n 2)) '(1 2 3 4))  ; => (0.5 1.5)
#+end_src

** ~(join LIST DELIM)~
Join the elements of ~LIST~ into a string separated by ~DELIM~.

#+begin_src lisp
(join '(foo bar baz) '-)            ; => foo-bar-baz
(join '(69 "is" 'the "answer") " ") ; => "69 is the answer"
#+end_src

** ~(foldl INIT FUNCTION LIST)~
Left fold on ~LIST~ using ~FUNCTION~ with initial value ~INIT~.

#+begin_src lisp
(foldl + 0 '(1 2 3 4))    ; => 10
(foldl cons 0 '(1 2 3 4)) ; => (0 1 2 3 4)
#+end_src

** ~(foldr INIT FUNCTION LIST)~
Right fold on ~LIST~ using ~FUNCTION~ with initial value ~INIT~.

#+begin_src lisp
(foldr - 10 '(1 2 3))     ; => 4
(foldr cons 0 '(1 2 3 4)) ; => (0 4 3 2 1)
#+end_src

** ~(find SEQUENCE PATTERN [START])~
Find the index of ~PATTERN~ in ~SEQUENCE~. Returns ~-1~ if the
pattern is not found. Searching begins at ~START~ which defaults to
~0~.

#+begin_src lisp
(find 'foobarbaz 'bar)     ; => 3
(find "substring" "str")   ; => 3
(find "foobarbaz" "blah")  ; => -1
(find "substrsub" "sub" 1) ; => 6
(find "substrsub" "foo" 3) ; => -1
(find '(1 2 foo) 'foo)     ; => 1
(find '(1 2 baz) 'bar)     ; => -1
#+end_src

** ~(split STRING-LIKE DELIM)~
Split ~STRING-LIKE~ by ~DELIM~.

#+begin_src lisp
(split "foo bar baz" " ") ; => ("foo" "bar" "baz")
(split "foo-bar-baz" '-)  ; => ("foo" "bar" "baz")
(split 'foo-bar-baz "-")  ; => ("foo" "bar" "baz")
(split 'foo-bar-baz '-)   ; => ("foo" "bar" "baz")
#+end_src

** ~(trim STRING-LIKE)~
Trim ~STRING-LIKE~.

#+begin_src lisp
(trim "  foo   ")      ; => "foo"
(trim "  foo  bar   ") ; => "foo  bar"
#+end_src

** ~(zipwith FUNCTION A B)~
Zip the elements of ~A~ and ~B~ together using ~FUNCTION~.

#+begin_src lisp
(zipwith * '(1 2 3) '(1 2))   ; => 1 4
(zipwith + '(1 2 3) '(1 3 4)) ; => 2 5 7
#+end_src

** ~(zip FUNCTION A B)~
Zip the elements of ~A~ and ~B~ together.

#+begin_src lisp
(zip '(1 2 3) '(1 2))   ; => ((1 1) (2 2))
(zip '(1 2 3) '(1 3 4)) ; => ((1 1) (2 3) (3 4))
#+end_src

** ~(ns NAME [BINDINGS])~
Kind of a hack to implement namespaces. Basically it adds a
~NAMESPACE/~ before all the forms called inside it.

Here's an example.

#+begin_src lisp
(ns math
    (defun double (n)
      (* n 2))

    (defun half (n)
      (/ n 2)))

(math/double 5) ; => 10
(math/half 5)   ; => 2.5
#+end_src

** ~(use NAME)~
Hacky brother of ~ns~. Creates a binding ~SYMBOL~ for every
~NAMESPACE/SYMBOL~ definition in the ~NAMESPACE~.

Here's an example.

#+begin_src lisp
(ns math
    (defun double (n)
      (* n 2))

    (defun half (n)
      (/ n 2)))

(math/double 5) ; => 10
(math/half 5)   ; => 2.5

(use math)      ; => Load the namespace into the global namespace

(double 5)      ; => 10
(half 5)        ; => 2.5
#+end_src

** ~(loop [BODY])~
Infinite loop. Basically like ~(while true BODY)~.

#+begin_src lisp
$ lust
> (loop (print "Infinite!"))
Infinite!
Infinite!
Infinite!
Infinite!
Infinite!
Infinite!
...
#+end_src

** ~(load FILE)~
Evaluate the contents of ~FILE~. Basically ~(eval (open FILE))~.

#+begin_src console
$ cat test
(print (+ 1 2))
$ lust
> (eval 'test)
3
nil
> (eval "test")
3
nil
#+end_src

** ~(+= NUMBER VALUE)~
Adds ~VALUE~ to ~NUMBER~.

#+begin_src lisp
(let number 5)
(print number) ; => 5

(+= number 5)
(print number) ; => 10
#+end_src

** ~(-= NUMBER VALUE)~
Subtract ~VALUE~ from ~NUMBER~.

#+begin_src lisp
(let number 10)
(print number) ; => 10

(-= number 5)
(print number) ; => 5
#+end_src

** ~(*= NUMBER VALUE)~
Multiply ~VALUE~ with ~NUMBER~.

#+begin_src lisp
(let number 5)
(print number) ; => 5

(*= number 5)
(print number) ; => 25
#+end_src

** ~(/= NUMBER VALUE)~
Divide ~VALUE~ by ~NUMBER~.

#+begin_src lisp
(let number 30)
(print number) ; => 30

(/= number 5)
(print number) ; => 6
#+end_src

** ~(%= NUMBER VALUE)~
Performs modulo on ~VALUE~ by ~NUMBER~.

#+begin_src lisp
(let number 7)
(print number) ; => 7

(%= number 4)
(print number) ; => 3
#+end_src
